{
  "parser": "@typescript-eslint/parser",
  "extends": [
    "plugin:mdx/recommended", // https://github.com/mdx-js/eslint-mdx
    "plugin:react/recommended",
    "prettier", // Uses eslint-config-prettier to disable ESLint rules from @typescript-eslint/eslint-plugin that would conflict with prettier
    "plugin:prettier/recommended" // Enables eslint-plugin-prettier and eslint-config-prettier. This will display prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array
  ],
  "plugins": [
    "jest",
    "react-hooks",
    /**
     * @see https://github.com/lydell/eslint-plugin-simple-import-sort#readme
     */
    "simple-import-sort"
  ],
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "ignorePatterns": [
    "node_modules",
    "**/lib/**/*",
    "**/built/**/*",
    ".cache",
    "public",
    "graphql-types.ts",
    "dist"
  ],
  "env": {
    "jest": true,
    "browser": true
  },
  "settings": {
    "import/resolver": {
      "babel-module": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      },
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    },
    "simple": {
      "version": "detect" // Tells eslint-plugin-react to automatically detect the version of React to use
    },
    "react": {
      "version": "detect" // Tells eslint-plugin-react to automatically detect the version of React to use
    }
  },
  "rules": {
    "camelcase": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-unused-vars": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/ban-ts-comment": "off",
    "@typescript-eslint/camelcase": "off",
    "@typescript-eslint/ban-ts-ignore": "off",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/triple-slash-reference": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/ban-types": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-explicit-any": "off", // TODO: enable, this is good practice for debugging
    "explicit-function-return-type": "off",
    "global-require": "off",
    "import/export": "off",
    "import/extensions": "off",
    "import/no-extraneous-dependencies": "off",
    "import/no-named-as-default": "off",
    "import/no-webpack-loader-syntax": "off",
    "import/prefer-default-export": "off",
    "jsx-a11y/anchor-has-content": "off",
    "jsx-a11y/anchor-is-valid": "off",
    "jsx-a11y/label-has-associated-control": "off",
    "jsx-a11y/label-has-for": "off",
    "jsx-a11y/no-autofocus": "off",
    "no-console": "off", // TODO: turn on once we have centralized logging
    "no-bitwise": "off",
    "no-nested-ternary": "off",
    "no-param-reassign": "off",
    "no-plusplus": "off",
    "no-restricted-syntax": "off",
    "no-sparse-arrays": "off",
    "no-underscore-dangle": "off",
    "no-unused-expressions": "off",
    "no-use-before-define": "off",
    "react/button-has-type": "off",
    "react/default-props-match-prop-types": "off",
    "react/destructuring-assignment": "off",
    "react/jsx-filename-extension": "off",
    "react/jsx-props-no-spreading": "off",
    "react/no-array-index-key": "off",
    "react/no-danger": "off",
    "react/no-multi-comp": "off",
    "react/prop-types": "off",
    "react/display-name": "off", // TODO: enable, this is good practice for debugging
    "react/require-default-props": "off",
    "react/state-in-constructor": "off",
    "react/no-unescaped-entities": "off",
    "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
    "react-hooks/exhaustive-deps": "warn", // Checks effect dependencies
    "prettier/prettier": [
      "warn",
      {
        "endOfLine": "auto"
      }
    ],
    "jest/consistent-test-it": [
      "error",
      {
        "fn": "it",
        "withinDescribe": "it"
      }
    ],
    "simple-import-sort/imports": "warn",
    "simple-import-sort/exports": "warn"
  },
  "overrides": [
    {
      "files": ["*.tsx", "*.ts"],
      "rules": {
        "simple-import-sort/imports": [
          "warn",
          {
            "groups": [
              // Node.js builtins. You could also generate this regex if you use a `.js` config.
              // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
              [
                "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)"
              ],
              // React/gatsby/next/other related packages come first.
              ["^react|^gatsby"],
              // Scoped packages
              ["^@?\\w"],
              // Internal packages.
              ["^(@|@condohub|@ui|components|utils|config|vendored-lib)(/.*|$)"],
              // Side effect imports.
              ["^\\u0000"],
              // Parent imports. Put `..` last.
              ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
              // Other relative imports. Put same-folder imports and `.` last.
              ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
              // Style imports.
              ["^.+\\.s?css$"]
            ]
          }
        ]
      }
    }
  ]
}
